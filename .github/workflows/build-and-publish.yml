name: Build and Publish to NPM

on:
  push:
    branches:
      - 'release-v*'
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Override version (e.g., 1.0.6). Leave empty to auto-calculate from branch.'
        required: false
        type: string
      force_publish:
        description: 'Force publish package even if it already exists'
        required: false
        default: false
        type: boolean
      registry_target:
        description: 'Target registry for publishing'
        required: false
        default: 'npmjs'
        type: choice
        options:
          - 'npmjs'
          - 'github'
          - 'both'

permissions:
  contents: write
  packages: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      published: ${{ steps.publish.outputs.published }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for version calculation
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Calculate version
      id: version
      run: |
        # Check if version is manually provided
        if [ -n "${{ github.event.inputs.version_override }}" ]; then
          VERSION="${{ github.event.inputs.version_override }}"
          echo "Using manual version override: $VERSION"
        else
          # Extract version from branch name (e.g., release-v1.0 -> 1.0)
          BRANCH_NAME="${{ github.ref_name }}"
          
          if [[ "$BRANCH_NAME" =~ ^release-v([0-9]+\.[0-9]+)$ ]]; then
            BASE_VERSION="${BASH_REMATCH[1]}"
            echo "Base version from branch: $BASE_VERSION"
            
            # Find the next available patch version
            PATCH=0
            while true; do
              VERSION="${BASE_VERSION}.${PATCH}"
              TAG="v${VERSION}"
              
              # Check if this tag already exists
              if git tag -l "$TAG" | grep -q "^$TAG$"; then
                echo "Version $VERSION already exists, trying next patch version..."
                PATCH=$((PATCH + 1))
              else
                echo "Found available version: $VERSION"
                break
              fi
              
              # Safety check to prevent infinite loop
              if [ $PATCH -gt 100 ]; then
                echo "Error: Could not find available patch version after 100 attempts"
                exit 1
              fi
            done
          else
            # Fallback to version from package.json and increment patch
            echo "Branch name doesn't match release-vX.Y pattern, using version from package.json"
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            
            if [ -z "$CURRENT_VERSION" ]; then
              echo "Error: Could not determine version from package.json"
              exit 1
            fi
            
            # Split version into parts and increment patch
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            PATCH=$((PATCH + 1))
            VERSION="${MAJOR}.${MINOR}.${PATCH}"
            echo "Incremented version: $VERSION"
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Final version: $VERSION"
    
    - name: Update version in package.json
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        npm version "$VERSION" --no-git-tag-version
        echo "Updated package.json with version $VERSION"
        
        # Show the updated version info
        echo "Package details:"
        cat package.json | jq '.name, .version, .description'
    
    - name: Install dependencies
      run: |
        echo "Installing dependencies..."
        npm ci
        echo "Dependencies installed successfully"
    
    - name: Lint code
      run: |
        # Run linting if available
        if npm run lint --silent > /dev/null 2>&1; then
          echo "Running linter..."
          npm run lint
        else
          echo "No lint script found, skipping linting"
        fi
    
    - name: Run tests
      run: |
        echo "Running tests..."
        if npm run test --silent > /dev/null 2>&1; then
          npm test
          echo "All tests passed!"
        else
          echo "No test script found or tests not properly configured"
          echo "Running basic validation instead..."
          
          # Basic validation - check if main entry point exists and is valid
          MAIN_FILE=$(node -p "require('./package.json').main")
          if [ -f "$MAIN_FILE" ]; then
            echo "✅ Main entry point exists: $MAIN_FILE"
            # Try to require the main file to check for syntax errors
            if node -c "$MAIN_FILE"; then
              echo "✅ Main entry point has valid syntax"
            else
              echo "❌ Main entry point has syntax errors"
              exit 1
            fi
          else
            echo "❌ Main entry point not found: $MAIN_FILE"
            exit 1
          fi
          
          # Check if CLI binaries exist and are executable
          if [ -f "./create.js" ]; then
            echo "✅ CLI entry point exists: ./create.js"
            if node -c "./create.js"; then
              echo "✅ CLI entry point has valid syntax"
            else
              echo "❌ CLI entry point has syntax errors"
              exit 1
            fi
          fi
        fi
    
    - name: Build package
      run: |
        echo "Building package..."
        
        # Run build script if available
        if npm run build --silent > /dev/null 2>&1; then
          npm run build
          echo "Build completed successfully"
        else
          echo "No build script found, assuming package is ready for publishing"
        fi
        
        # Create package tarball for validation
        npm pack --dry-run
        echo "Package validation completed"
    
    - name: Create package tarball
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        PACKAGE_NAME=$(node -p "require('./package.json').name")
        
        # Create the package tarball
        npm pack
        
        # Rename to include version for clarity
        TARBALL_NAME="${PACKAGE_NAME}-${VERSION}.tgz"
        SAFE_NAME=$(echo "$PACKAGE_NAME" | sed 's/@//g' | sed 's/\//-/g')
        SAFE_TARBALL="${SAFE_NAME}-${VERSION}.tgz"
        
        if [ -f "${SAFE_TARBALL}" ]; then
          echo "Package tarball created: ${SAFE_TARBALL}"
          ls -la "${SAFE_TARBALL}"
          
          # Verify package contents
          echo "Package contents:"
          tar -tzf "${SAFE_TARBALL}" | head -20
          
          # Get package size
          SIZE=$(stat -c%s "${SAFE_TARBALL}" 2>/dev/null || stat -f%z "${SAFE_TARBALL}" 2>/dev/null || echo "unknown")
          echo "Package size: $SIZE bytes"
        else
          echo "❌ Failed to create package tarball"
          ls -la *.tgz || echo "No tgz files found"
          exit 1
        fi
    
    - name: Upload package as artifact
      uses: actions/upload-artifact@v4
      with:
        name: npm-package-${{ steps.version.outputs.version }}
        path: "*.tgz"
        retention-days: 30
    
    - name: Publish to NPM
      id: publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        REGISTRY_TARGET="${{ github.event.inputs.registry_target || 'npmjs' }}"
        PUBLISHED="false"
        
        echo "🚀 Publishing package to $REGISTRY_TARGET..."
        
        # Function to publish to NPM.js
        publish_to_npmjs() {
          echo "📦 Publishing to NPM.js..."
          
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "❌ Error: NPM_TOKEN secret is not configured"
            echo "Please add your NPM token as a repository secret named 'NPM_TOKEN'"
            echo "Get your token from: https://www.npmjs.com/settings/tokens"
            return 1
          fi
          
          # Configure npm registry
          npm config set registry https://registry.npmjs.org/
          npm config set //registry.npmjs.org/:_authToken $NODE_AUTH_TOKEN
          
          FORCE_FLAG=""
          if [ "${{ github.event.inputs.force_publish }}" == "true" ]; then
            echo "⚠️  Force publish enabled"
            # NPM doesn't have a direct force flag, but we can use --force
            FORCE_FLAG="--force"
          fi
          
          # Attempt to publish
          if npm publish $FORCE_FLAG --access public; then
            echo "✅ Successfully published to NPM.js"
            return 0
          else
            echo "❌ Failed to publish to NPM.js"
            echo "This might be because the package version already exists"
            return 1
          fi
        }
        
        # Function to publish to GitHub Packages
        publish_to_github() {
          echo "📦 Publishing to GitHub Packages..."
          
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "❌ Error: GITHUB_TOKEN is not available"
            return 1
          fi
          
          # Configure npm for GitHub Packages
          npm config set registry https://npm.pkg.github.com
          npm config set //npm.pkg.github.com/:_authToken $GITHUB_TOKEN
          
          # Update package.json to ensure proper scope for GitHub Packages
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          if [[ "$PACKAGE_NAME" != @* ]]; then
            echo "Adding GitHub scope to package name for GitHub Packages..."
            SCOPED_NAME="@${{ github.repository_owner }}/${PACKAGE_NAME}"
            jq ".name = \"$SCOPED_NAME\"" package.json > package.json.tmp
            mv package.json.tmp package.json
          fi
          
          # Attempt to publish
          if npm publish; then
            echo "✅ Successfully published to GitHub Packages"
            return 0
          else
            echo "❌ Failed to publish to GitHub Packages"
            return 1
          fi
        }
        
        # Publish based on target
        SUCCESS_COUNT=0
        TOTAL_ATTEMPTS=0
        
        case "$REGISTRY_TARGET" in
          "npmjs")
            TOTAL_ATTEMPTS=1
            if publish_to_npmjs; then
              SUCCESS_COUNT=1
              PUBLISHED="true"
            fi
            ;;
          "github")
            TOTAL_ATTEMPTS=1
            if publish_to_github; then
              SUCCESS_COUNT=1
              PUBLISHED="true"
            fi
            ;;
          "both")
            TOTAL_ATTEMPTS=2
            if publish_to_npmjs; then
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              PUBLISHED="true"
            fi
            
            # Reset npm config and publish to GitHub
            if publish_to_github; then
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              PUBLISHED="true"
            fi
            ;;
        esac
        
        echo "published=$PUBLISHED" >> $GITHUB_OUTPUT
        
        echo "📊 Publication Summary:"
        echo "   Successfully published: $SUCCESS_COUNT/$TOTAL_ATTEMPTS registries"
        
        if [ "$SUCCESS_COUNT" -eq 0 ]; then
          echo "❌ Failed to publish to any registry"
          if [ "${{ github.event.inputs.force_publish }}" != "true" ]; then
            echo "💡 Tip: If you want to republish existing versions, use the 'force_publish' option"
          fi
          exit 1
        elif [ "$SUCCESS_COUNT" -lt "$TOTAL_ATTEMPTS" ]; then
          echo "⚠️  Some registries failed, but at least one succeeded"
        else
          echo "🎉 Published to all target registries successfully!"
        fi
    
    - name: Create Git Tag
      if: steps.publish.outputs.published == 'true'
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        TAG="v$VERSION"
        
        # Create and push the tag
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        if git tag -l "$TAG" | grep -q "^$TAG$"; then
          echo "⚠️  Tag $TAG already exists, skipping tag creation"
        else
          git tag -a "$TAG" -m "Release version $VERSION"
          git push origin "$TAG"
          echo "✅ Created and pushed tag: $TAG"
        fi
    
    - name: Create GitHub Release
      if: steps.publish.outputs.published == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          ## 🚀 Release v${{ steps.version.outputs.version }}
          
          ### 📦 Installation
          ```bash
          npm install -g @vnext/cli@${{ steps.version.outputs.version }}
          ```
          
          ### 🔗 Package Links
          - [NPM Package](https://www.npmjs.com/package/@vnext/cli)
          - [GitHub Packages](https://github.com/${{ github.repository }}/packages)
          
          ### 📋 Changes
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
          
          ---
          *This release was automatically created by GitHub Actions*
        draft: false
        prerelease: false
    
    - name: Summary
      if: always()
      run: |
        echo "## 📦 NPM Package Publishing Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Version Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Package**: \`@burgan-tech/vnext-cli\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Published**: ${{ steps.publish.outputs.published }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "${{ github.event.inputs.version_override }}" ]; then
          echo "- **Version Override**: Used manual version override" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ github.event.inputs.force_publish }}" == "true" ]; then
          echo "- **Force Publish**: Enabled" >> $GITHUB_STEP_SUMMARY
        fi
        
        REGISTRY_TARGET="${{ github.event.inputs.registry_target || 'npmjs' }}"
        echo "- **Target Registry**: $REGISTRY_TARGET" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Package Information" >> $GITHUB_STEP_SUMMARY
        echo "This is a CLI tool for creating and managing vNext domain projects with modular component sharing." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Available Commands:**" >> $GITHUB_STEP_SUMMARY
        echo "- \`vnext\` - Main CLI command" >> $GITHUB_STEP_SUMMARY
        echo "- \`vnxt\` - Short alias for vnext" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.publish.outputs.published }}" == "true" ]; then
          echo "### 🎉 Published Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Installation Instructions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Global Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "npm install -g @burgan-tech/vnext-cli@${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Project Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "npm install @burgan-tech/vnext-cli@${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Using npx (no installation required)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "npx @burgan-tech/vnext-cli@${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Publication Failed" >> $GITHUB_STEP_SUMMARY
          echo "The package was not successfully published. Check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [NPM Package](https://www.npmjs.com/package/@burgan-tech/vnext-cli)" >> $GITHUB_STEP_SUMMARY
        echo "- [GitHub Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Workflow Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Package Documentation](https://github.com/${{ github.repository }}#readme)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Package will be available on NPM (may take a few minutes to appear in search)" >> $GITHUB_STEP_SUMMARY
        echo "2. Install and use the CLI: \`npm install -g @burgan-tech/vnext-cli\`" >> $GITHUB_STEP_SUMMARY
        echo "3. View package details and download statistics on NPM" >> $GITHUB_STEP_SUMMARY
        echo "4. Update documentation if needed" >> $GITHUB_STEP_SUMMARY
